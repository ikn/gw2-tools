#! /usr/bin/env bash

PROGRAM="gw2-arcdps-install"
VERSION="1.0"
SHORT_OPTIONS="hbr"
LONG_OPTIONS="version,help,build-templates,uninstall"
ERR_OTHER=1
ERR_USAGE=2
BASE_URL="http://www.deltaconnected.com/arcdps/x64"
DLL_NAME="d3d9.dll"
BT_DLL_NAME="d3d9_arcdps_buildtemplates.dll"

env_install_path=

opt_build_templates=n
opt_install=y


err () {
    code="$1"
    shift
    echo >&2 "$PROGRAM: error:" "$@"
    exit "$code"
}


usage_err () {
    if [ "$#" -gt 0 ]; then
        echo >&2 "$PROGRAM: error:" "$@"
    fi
    echo >&2
    echo >&2 "Call with \`--help' to display usage information."
    exit "$ERR_USAGE"
}


print_version () {
    echo "$PROGRAM $VERSION"
}


print_help() {
    print_version
    echo
    echo "Install the Guild Wars mod arcdps."
    echo
    echo "Usage: $PROGRAM [OPTION]..."
    echo
    echo "Options:"
    echo "  -b, --build-templates"
    echo "                also install the arcdps build templates addon"
    echo "  -r, --uninstall"
    echo "                remove installed files, if present; must specify"
    echo "                \`--build-templates' to remove build templates files"
    echo "  -h, --help    display this help and exit"
    echo "  --version     display version information and exit"
}


validate_install_path () {
    [ -z "$env_install_path" ] && {
        if [ -n "$WINEPREFIX" ]; then
            env_install_path="$WINEPREFIX/drive_c/Program Files/Guild Wars 2"
        else
            echo >&2 "error: environment variable not set: GW2_INSTALL_PATH"
            exit 2
        fi
    }
    [ -d "$env_install_path" ] || {
        echo >&2 "error: not a directory: $env_install_path"
        exit 2
    }
    env_install_path="$env_install_path/bin64"
    [ -d "$env_install_path" ] || {
        echo >&2 "no such directory: $env_install_path"
        exit 2
    }
    echo >&2 "info: using install directory: $env_install_path"
}


read_env () {
    env_install_path="$GW2_INSTALL_PATH"

    validate_install_path
}


read_options () {
    while true; do
        case "$1" in
            '--version')
                print_version
                exit 0
                ;;
            '-h'|'--help')
                print_help
                exit 0
                ;;
            '-b'|'--build-templates')
                opt_build_templates=y
                shift
                ;;
            '-r'|'--uninstall')
                opt_install=n
                shift
                ;;
            '--')
                shift
                break
                ;;
        esac
    done
}


install_arcdps () {
    local tmp
    tmp="$(mktemp -d)" || return 1
    cd "$tmp"

    curl --silent --show-error "$BASE_URL/$DLL_NAME" > "$DLL_NAME" || return 1
    curl --silent --show-error "$BASE_URL/$DLL_NAME.md5sum" \
        > "$DLL_NAME.md5sum" || return 1
    if [ "$opt_build_templates" = y ]; then
        curl --silent --show-error "$BASE_URL/buildtemplates/$BT_DLL_NAME" \
            > "$BT_DLL_NAME" || return 1
    fi
    # md5sum file expects files to be in directory `x64`
    mkdir x64 || return 1
    cp "$DLL_NAME" x64 || return 1
    md5sum --quiet --check "$DLL_NAME.md5sum" || return 1
    install -m644 "$DLL_NAME" "$env_install_path" || return 1
    if [ "$opt_build_templates" = y ]; then
        install -m644 "$BT_DLL_NAME" "$env_install_path" || return 1
    fi

    rm -rf "$tmp"
}


uninstall_arcdps () {
    rm -f "$env_install_path/$DLL_NAME" || return 1
    if [ "$opt_build_templates" = y ]; then
        rm -f "$env_install_path/$BT_DLL_NAME" || return 1
    fi
}


getopt -T &> /dev/null
if [ "$?" -ne 4 ]; then
    err "$ERR_OTHER" "unsupported version of \`getopt'"
fi
options_script="$(getopt --name "$PROGRAM" --shell bash \
    --options "$SHORT_OPTIONS" --longoptions "$LONG_OPTIONS" -- "$@")"
getopt_code="$?"
if [ "$getopt_code" -eq 1 ]; then
    usage_err
elif [ "$getopt_code" -ne 0 ]; then
    exit 1
fi
eval set -- "$options_script"
read_options "$@"
read_env

if [ "$opt_install" = y ]; then
    install_arcdps
else
    uninstall_arcdps
fi
